{"version":3,"file":"static/js/991.efa6e0f5.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Spinner/Spinner.module.jsx","components/Spinner/Spinner.jsx","components/ContactsLayout/ContactsLayout.jsx","components/ContactForm/ContactForm.module.jsx","components/ContactForm/ContactForm.jsx","components/ContactFilter/ContactFilter.module.jsx","components/ContactFilter/ContactFilter.jsx","components/ContactsList/ContactsList.module.jsx","components/ContactsList/ContactsList.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const selectContactsState = state => {\n  const normalized = state.filter.toLowerCase().trim();\n\n  return state.contacts.items.filter(item =>\n    item.name.toLowerCase().trim().includes(normalized)\n  );\n};\n\nexport const selectFilteredContacts = state => state.filters;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import styled from \"@emotion/styled\";\n// import { Oval } from \"react-loader-spinner\";\n\nexport const Wrapper = styled.span`\ndisplay:flex;\njustify-content:center;\nmargin-top: 150px;\n`","import { Oval } from \"react-loader-spinner\";\nimport { Wrapper } from \"./Spinner.module\"\n\nexport const Spinner = () => {\n  return <Wrapper>\n    <Oval\n      height={60}\n      width={60}\n      color=\"#4fa94d\"\n      wrapperStyle={{}}\n      wrapperClass=\"\"\n      visible={true}\n      ariaLabel=\"oval-loading\"\n      secondaryColor=\"#4fa94d\"\n      strokeWidth={5}\n      strokeWidthSecondary={7}\n    />\n  </Wrapper>\n};\n","import PropTypes from 'prop-types';\n\nimport { Container, Typography } from '@mui/material';\n// import {  Title } from './Layout.module';\n\nexport const ContactsLayout = ({ title, children }) => {\n  return (\n    // rgb(232, 246, 228)\n    <Container style={{padding:\"30px\"}} sx={{backgroundColor: 'rgb(56, 60, 73)', width:800}} >\n      <Typography style={{display:\"flex\", justifyContent:\"center\", color:\"white\"}} variant='h2' sx={{fontSize:\"34px\", fontWeight: 700}}>{title}</Typography>\n      {children}\n    </Container>\n  );\n};\n\nContactsLayout.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n","import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\ndisplay:flex;\nflex-direction:column;\njustify-content:center;\npadding: 20px 200px;\n\n\n`\n\nexport const Input = styled.input`\n// width: 350px;\npadding: 14px;\nborder-radius: 8px;\noutline: none;\nborder: none;\n`\n\nexport const Label = styled.label`\ndisplay: flex;\nflex-direction: column;\nmargin-top:15px; \nfont-size:20px;\nfont-weight:500;\n`\nexport const ButtonAdd = styled.button`\nfont-size:20px;\nfont-weight:600;\nborder:none;\nborder-radius: 8px;\npadding: 14px;\nmargin-top:40px;\nmargin-right:auto;\nmargin-left:auto;\ncursor: pointer;\nwidth:144px;\n`;\n\n","import React from 'react';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\n\nimport { Form, Input, Label, ButtonAdd } from './ContactForm.module';\n\nimport { addContactThunk } from 'redux/contacts/contactsThunks';\nimport { selectContactsState } from 'redux/contacts/selectors';\n\n\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsState);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  \n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const newContact = (name, number) => {\n    return {\n      id: nanoid(),\n      name,\n      number,\n    }\n  };\n\n  const onInputChange = e => {\n\t\tconst { value } = e.currentTarget;\n\t\te.currentTarget.name === 'name' ? setName(value) : setNumber(value);\n  };\n\n  \n    const onFormSubmit = e => {\n        e.preventDefault();\n\n        const currentName = name;\n    \n      if (contacts.some(({ name }) => name === currentName)) {\n        reset();\n            return alert(`You already have ${(currentName).toUpperCase()} in your contacts! Please try to change the name of the contact!`);\n        }\n\t\n        const contact = newContact(name, number);\n        \n        dispatch(addContactThunk(contact))\n        reset();\n    };\n \n  return (\n    <Form onSubmit={onFormSubmit} autoComplete=\"off\">\n      <Label>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n         pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\" \n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={onInputChange}\n          placeholder='Enter Name..'      \n        />\n      </Label>\n      <Label>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={onInputChange}\n          placeholder=\"Enter Number..\"\n        />\n      </Label>\n      <ButtonAdd\n        type=\"submit\">Add</ButtonAdd>\n    </Form>\n  );\n};\n","import styled from '@emotion/styled';\n\n// export const Label = styled.label`\n// display: flex;\n// flex-direction: column;\n// padding:0 200px;\n// gap: 1px;\n// margin-top: 10px;\n// font-size: 20px;\n// font-weight: 500;\n// `;\n\n// export const Input = styled.input`\n// width: 96%;\n// border-radius: 8px;\n// outline: none;\n// border: none;\n// padding: 8px;\n// `;\n\nexport const Input = styled.input`\n// width: 350px;\npadding: 14px;\nborder-radius: 8px;\noutline: none;\nborder: none;\n`\n\nexport const Label = styled.label`\ndisplay: flex;\nflex-direction: column;\n\npadding:0 200px;\nmargin-top:15px; \nfont-size:20px;\nfont-weight:500;\n`\nexport const Message = styled.h2`\nfont-size:20px;\nfont-weight:500;\n`\n\n\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilterContacts } from 'redux/contacts/filterSlice';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\n\nimport { Label, Input, Message } from './ContactFilter.module';\n\n\n\nexport const ContactFilter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilteredContacts);\n\n  // const label = 'Find contacts by name';\n\n  const handleFilterChange = e => {\n    const searchValue = e.target.value;\n\n    dispatch(setFilterContacts(searchValue));\n  };\n\n\n  return (\n    <Label>\n     <Message>Find contacts by name</Message>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Enter contact name...\"\n        value={filter}\n        onChange={handleFilterChange}\n      />\n    </Label>\n  );\n};\n\n","import styled from '@emotion/styled';\n\n\nexport const List = styled.ul`\npadding: 10px 200px;\nmargin: 0;\n`;\n\n\nexport const ContactItem = styled.li`\ndisplay: flex;\nalign-items: center;\nmargin: 8px;\n`;\n\nexport const ContactName = styled.p`\nmargin: 0;\nfont-size:20px;\nfont-weight:500;\n`;\n\nexport const ContactNumber = styled.span`\nmargin-left: 8px;\nfont-size:20px;\nfont-weight:500;\n`;\n\nexport const Button = styled.button`\nfont-size:20px;\nfont-weight:600;\n\nmargin: 8px 8px 8px auto;\n// margin-left:auto;\npadding: 8px 16px;\n\nborder: none;\nborder-radius: 7px;\ncursor: pointer;\n\n`;\n\n\n\n","import { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectContactsState } from 'redux/contacts/selectors';\nimport { deleteContactThunk } from 'redux/contacts/contactsThunks';\n\nimport { List, ContactItem, ContactName, ContactNumber, Button} from './ContactsList.module';\n\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsState);\n\n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <ContactItem key={id}>\n            <ContactName>\n              {name}: <ContactNumber>{number}</ContactNumber>\n            </ContactName>\n            <Button\n              type=\"button\"\n              onClick={() => dispatch(deleteContactThunk(id))}\n              deleting\n            >\n              x\n            </Button>\n          </ContactItem>\n        );\n      })}\n      {/* {isFetching && <Spinner />} */}\n      \n    </List>\n  );\n\n  \n};\n\n\nContactsList.propTypes = {\n  visibleContacts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired\n  )\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useAuth } from 'hooks/useAuth';\n\nimport { fetchContactsThunk } from 'redux/contacts/contactsThunks';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nimport {  toast } from 'react-toastify';\n\nimport { Spinner } from 'components/Spinner/Spinner';\nimport { ContactsLayout } from 'components/ContactsLayout/ContactsLayout';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactFilter } from 'components/ContactFilter/ContactFilter';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const { user } = useAuth();\n  \n\n\n  useEffect(() => {\n    dispatch(fetchContactsThunk());\n      \n  }, [dispatch]);\n  \n  useEffect(() => {\n    toast.success(`Congratulations, ${user.name} authorization was successful!`)\n  }, [user.name]);\n\n  \n  return (\n    <>\n      <ContactsLayout title=\"Phonebook\">\n        <ContactForm />\n      </ContactsLayout>\n      <ContactsLayout title=\"Contacts\">\n        <ContactFilter />\n        <ContactsList />\n        {isLoading && <Spinner />}\n      </ContactsLayout>\n    </>\n  )\n    \n       \n};\nexport default ContactsPage;\n"],"names":["selectContactsState","state","normalized","filter","toLowerCase","trim","contacts","items","item","name","includes","selectFilteredContacts","filters","selectIsLoading","isLoading","Wrapper","styled","Spinner","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary","ContactsLayout","title","children","Container","style","padding","sx","backgroundColor","Typography","display","justifyContent","variant","fontSize","fontWeight","Form","Input","Label","ButtonAdd","ContactForm","dispatch","useDispatch","useSelector","useState","setName","number","setNumber","reset","onInputChange","e","value","currentTarget","onSubmit","preventDefault","currentName","some","alert","toUpperCase","contact","id","nanoid","newContact","addContactThunk","autoComplete","type","pattern","required","onChange","placeholder","Message","ContactFilter","searchValue","target","setFilterContacts","List","ContactItem","ContactName","ContactNumber","Button","ContactsList","map","onClick","deleteContactThunk","deleting","user","useAuth","useEffect","fetchContactsThunk","toast"],"sourceRoot":""}